[{"/Users/cicichen/Documents/GitHub/spark-project/src/index.js":"1","/Users/cicichen/Documents/GitHub/spark-project/src/reportWebVitals.js":"2","/Users/cicichen/Documents/GitHub/spark-project/src/App.js":"3","/Users/cicichen/Documents/GitHub/spark-project/src/serviceWorkerRegistration.js":"4","/Users/cicichen/Documents/GitHub/spark-project/src/map/map.js":"5","/Users/cicichen/Documents/GitHub/spark-project/src/firebase/firebase.js":"6","/Users/cicichen/Documents/GitHub/spark-project/src/map/pin.js":"7"},{"size":858,"mtime":1646343200009,"results":"8","hashOfConfig":"9"},{"size":364,"mtime":1645997480871,"results":"10","hashOfConfig":"9"},{"size":279,"mtime":1646343200002,"results":"11","hashOfConfig":"9"},{"size":5064,"mtime":1645997480874,"results":"12","hashOfConfig":"9"},{"size":3552,"mtime":1646343200010,"results":"13","hashOfConfig":"9"},{"size":535,"mtime":1646343200003,"results":"14","hashOfConfig":"9"},{"size":630,"mtime":1646343200016,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1flnih2",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/cicichen/Documents/GitHub/spark-project/src/index.js",[],[],"/Users/cicichen/Documents/GitHub/spark-project/src/reportWebVitals.js",[],[],["40","41"],"/Users/cicichen/Documents/GitHub/spark-project/src/App.js",[],[],"/Users/cicichen/Documents/GitHub/spark-project/src/serviceWorkerRegistration.js",[],[],"/Users/cicichen/Documents/GitHub/spark-project/src/map/map.js",["42","43","44","45","46"],[],"import * as React from 'react';\nimport {useState, useMemo, useEffect} from 'react';\nimport Map, {\n  Marker,\n  Popup,\n  NavigationControl,\n  FullscreenControl,\n  ScaleControl,\n  GeolocateControl\n} from 'react-map-gl';\nimport Pin from './pin.js';\nimport firebase from '../firebase/firebase';\nimport Button from '@mui/material/Button';\n\nconst TOKEN = 'pk.eyJ1IjoiY2hyaXN0aWFudG1hcmsiLCJhIjoiY2wwNXQ4aDM0MGNydzNpcWo4dWY5MGJkeSJ9.YTP08GGbccsCzCripTYICw'; // Set your mapbox token here\n\nexport default function MapComponent() {\n  const [popupInfo, setPopupInfo] = useState(null);\n  const [beaches, setBeaches] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState('map');\n\n  // for timer page\n  const [selectedBeach, setSelectedBeach] = useState('');\n  \n  useEffect(() => {\n\t\tconst getBeaches = async () => {\n      setLoading(true);\n      const beachesRef = await firebase.firestore().collection(\"beaches\");\n      await beachesRef.onSnapshot((querySnapshot) => {\n        const items = [];\n        querySnapshot.forEach((doc) => {\n          items.push(doc.data());\n        })\n        setBeaches(items);\n        setLoading(false);\n      })\n    }\n    getBeaches();\n\t}, []);\n\n  const pins = useMemo(\n    () => \n      beaches.map((beach, index) => (\n        <Marker\n            key={`marker-${index}`}\n            longitude={beach.coordinate._long}\n            latitude={beach.coordinate._lat}\n            anchor=\"bottom\"\n        >\n            <Pin onClick={() => setPopupInfo(beach)} />\n        </Marker>\n    )), [beaches]\n  );\n\n  function convertTime(time) {\n    var newDate = new Date(time*1000);\n    return newDate\n  }\n\n  if (loading || beaches.toString() == \"[]\") {\n    return \"Loading...\"\n  }\n\n  console.log(beaches)\n\n  return (\n    currentPage == 'map' ?\n      <div>\n        <Map\n          initialViewState={{\n              longitude: -70.9,\n              latitude: 42.35,\n              zoom: 10\n          }}\n          mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n          mapboxAccessToken={TOKEN}\n          style={{height: '100vh'}}\n        >\n          <GeolocateControl position=\"top-left\" />\n          <FullscreenControl position=\"top-left\" />\n          <NavigationControl position=\"top-left\" />\n          <ScaleControl />\n\n          {pins}\n\n          {popupInfo && (\n            <Popup\n              anchor=\"top\"\n              longitude={Number(popupInfo.coordinate._long)}\n              latitude={Number(popupInfo.coordinate._lat)}\n              closeOnClick={false}\n              onClose={() => setPopupInfo(null)}\n            >\n              <div>\n                <h2> {popupInfo.name} </h2>\n                <Button style={{marginBottom: 15}} variant=\"outlined\" onClick={() => {setCurrentPage('timer'); setSelectedBeach(popupInfo)}}>Start!</Button>\n                <div style={{textAlign: 'left', paddingBottom: 10}}> <b>Last cleaned:</b> {convertTime(popupInfo.lastCleaned.seconds).toString().substring(0,15)} </div>\n                <div style={{textAlign: 'left', paddingBottom: 10}}> <b>Marine Life:</b> { popupInfo.marineLife } </div>\n              </div>\n              <img width=\"100%\" src={popupInfo.photoURL} />\n            </Popup>\n          )}\n        </Map>\n      </div>\n  : currentPage == 'timer' ?\n  <div>\n    <h1>{selectedBeach.name}</h1>\n    <img style={{marginBottom: 15}} width=\"70%\" src={selectedBeach.photoURL} />\n    <div><Button style={{marginBottom: 15}} variant=\"outlined\" onClick={() => {setCurrentPage('map')}}>Back</Button></div>\n  </div>\n  : <div></div>\n  );\n}",["47","48"],"/Users/cicichen/Documents/GitHub/spark-project/src/firebase/firebase.js",[],[],"/Users/cicichen/Documents/GitHub/spark-project/src/map/pin.js",[],[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":61,"column":37,"nodeType":"55","messageId":"56","endLine":61,"endColumn":39},{"ruleId":"53","severity":1,"message":"54","line":68,"column":17,"nodeType":"55","messageId":"56","endLine":68,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":101,"column":15,"nodeType":"59","endLine":101,"endColumn":60},{"ruleId":"53","severity":1,"message":"54","line":106,"column":17,"nodeType":"55","messageId":"56","endLine":106,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":109,"column":5,"nodeType":"59","endLine":109,"endColumn":80},{"ruleId":"49","replacedBy":"60"},{"ruleId":"51","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["62"],["63"],"no-global-assign","no-unsafe-negation"]